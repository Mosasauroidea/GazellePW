source connect {
    type = mysql
    sql_host = mysql
    sql_user = gazelle
    sql_pass = password
    sql_db = gazelle
    sql_port = 3306
}

source torrents_base : connect {
    sql_attr_uint = groupid
    sql_attr_uint = time
    sql_attr_uint = categoryid
    sql_attr_uint = releasetype
    sql_attr_bigint = size
    sql_attr_uint = snatched
    sql_attr_uint = seeders
    sql_attr_uint = leechers
    sql_attr_uint = year
    sql_attr_bool = scene
    sql_attr_uint = freetorrent
    sql_attr_float = imdbrating
    sql_attr_float = doubanrating
    sql_attr_float = rtrating
    sql_attr_uint = diy
    sql_attr_uint = buy
    sql_attr_uint = chinesedubbed
    sql_attr_uint = specialsub
    sql_attr_uint = checked
}
source torrents : torrents_base {
    #By inheriting from torrents_base, we keep all the connection info
    sql_query_pre = SET group_concat_max_len = 101400
    sql_query_pre = SET @starttime = NOW()
    sql_query_pre = SET NAMES UTF8
    sql_query_pre = REPLACE INTO sphinx_index_last_pos VALUES ('torrents', UNIX_TIMESTAMP(@starttime))
    sql_query_pre = TRUNCATE sphinx_tg
    sql_query_pre = INSERT INTO sphinx_tg \
        (id, name, year, catid, reltype, \
            tags, imdbid, imdbrating, doubanrating, region, language, rtrating) \
        SELECT tg.ID, CONCAT_WS(' ', tg.Name, tg.SubName), tg.Year, \
            tg.Categoryid, tg.Releasetype,\
            replace(group_concat(t.Name SEPARATOR ' '), '.', '_'), \
            tg.IMDBID, tg.IMDBRating, tg.DoubanRating, \
            REPLACE(tg.Region, ',', ' '), \
            REPLACE(tg.Language, ',', ' '), \
            replace(tg.RTRating,"%","")/100 \
        FROM torrents_group tg \
        INNER JOIN torrents_tags tt ON (tt.GroupID = tg.ID) \
        INNER JOIN tags t ON (t.ID = tt.TagID) \
        WHERE tg.time < @starttime \
        GROUP BY tg.ID
    sql_query_pre = TRUNCATE sphinx_t
    sql_query_pre = INSERT INTO sphinx_t \
        (id, gid, size, snatched, seeders, leechers, time, scene, \
            freetorrent, \
            filelist, uid, source, codec, container, resolution, subtitles, processing, remtitle, \
            diy, buy, chinesedubbed, specialsub, checked) \
        SELECT t.ID, t.GroupID, t.Size, t.Snatched, t.Seeders, t.Leechers, UNIX_TIMESTAMP(t.Time), \
            CAST(t.Scene AS CHAR), CAST(t.FreeTorrent AS CHAR), \
            (case when (t.Container = 'm2ts') then REPLACE(REPLACE(t.FilePath, '_', ' '), '/', ' ') else REPLACE(REPLACE(t.FileList, '_', ' '), '/', ' ') end) AS FileList, \
            t.UserID, t.Source, t.Codec, t.Container, t.Resolution, \
            t.Subtitles, \
            t.Processing, \
            REPLACE(t.RemasterTitle, '/', ' '), \
            t.Diy, t.Buy, t.ChineseDubbed, t.SpecialSub, Checked \
        FROM torrents t \
        WHERE t.Time < @starttime
    sql_query_pre = TRUNCATE sphinx_a
    sql_query_pre = INSERT INTO sphinx_a \
        (gid, aname) \
        SELECT GroupID, GROUP_CONCAT(aa.Name SEPARATOR ' ') \
        FROM torrents_artists AS ta \
            JOIN artists_alias AS aa ON (ta.ArtistID = aa.ArtistID) \
        GROUP BY ta.groupid \
        ORDER BY NULL
    sql_query = SELECT t.id, g.id AS groupid, g.name AS groupname, \
            tags AS taglist, year, year AS yearfulltext, \
            catid AS categoryid, t.time, reltype AS releasetype, \
            size, snatched, seeders, leechers, \
            scene, freetorrent, remtitle, \
            source, codec, container, resolution, processing,\
            language, region, imdbid, imdbrating, doubanrating, rtrating, REPLACE(subtitles, ',', ' ') as subtitles,\
            diy, buy, chinesedubbed, specialsub, filelist, checked, a.aname as artistname \
        FROM sphinx_t AS t \
            JOIN sphinx_tg AS g ON t.gid = g.id join sphinx_a as a on a.gid = t.gid
    sql_query_post_index = DELETE FROM sphinx_delta WHERE Time <= \
        (SELECT id FROM sphinx_index_last_pos WHERE type = 'torrents')
}

index torrents {
    source = torrents
    path = /var/lib/manticore/data/torrents
    preopen = 1
    phrase_boundary = U+F7 # This needs to the the same as the file delimiter in classes/torrents.class.php
    phrase_boundary_step = 50
    stored_fields = 
    charset_table =  0..9, english, cjk
    morphology = icu_chinese
    stopwords = zh
}
source delta : torrents_base {
    sql_query_pre = SET NAMES UTF8
    sql_query = SELECT *, Year AS yearfulltext FROM sphinx_delta WHERE Size > 0;
    sql_query_killlist = SELECT ID FROM sphinx_delta
}
index delta : torrents {
    source = delta
    path = /var/lib/manticore/data/delta
}
source requests_base : connect {
    sql_attr_uint = UserID
    sql_attr_uint = TimeAdded
    sql_attr_uint = LastVote
    sql_attr_uint = CategoryID
    sql_attr_uint = Year
    sql_attr_uint = ReleaseType
    sql_attr_uint = FillerID
    sql_attr_uint = TorrentID
    sql_attr_uint = TimeFilled
    sql_attr_uint = Visible
    sql_attr_uint = Votes
    sql_attr_uint = Bounty
}
source requests : requests_base {
    sql_query_pre = TRUNCATE TABLE sphinx_requests
    sql_query_pre = SET group_concat_max_len = 10140
    sql_query_pre = SET @starttime = NOW()
    sql_query_pre = REPLACE INTO sphinx_index_last_pos VALUES ('requests', UNIX_TIMESTAMP(@starttime))
    sql_query_pre = INSERT INTO sphinx_requests ( \
                ID, UserID, TimeAdded, LastVote, CategoryID, Title, \
                Year, ReleaseType,  \
                CodecList, SourceList, ContainerList, ResolutionList, FillerID, \
                TorrentID, TimeFilled, Visible, Votes, Bounty ) \
            SELECT \
                r.ID, r.UserID, UNIX_TIMESTAMP(TimeAdded), \
                UNIX_TIMESTAMP(LastVote), CategoryID, Title, Year, \
                ReleaseType, \
                CodecList, SourceList, ContainerList, ResolutionList, FillerID, TorrentID, \
                UNIX_TIMESTAMP(TimeFilled), Visible, \
                COUNT(rv.RequestID), SUM(rv.Bounty) >> 10 \
            FROM requests AS r \
                JOIN requests_votes AS rv ON rv.RequestID = r.ID \
            GROUP BY rv.RequestID
    sql_query_pre = INSERT INTO sphinx_requests ( \
                ID, ArtistList ) \
            SELECT \
                RequestID, \
                GROUP_CONCAT(aa.Name SEPARATOR ' ') \
            FROM requests_artists AS ra \
                JOIN artists_alias AS aa ON aa.ArtistID = ra.ArtistID \
                JOIN requests AS r ON r.ID = ra.RequestID \
            WHERE TimeAdded <= @starttime \
            GROUP BY r.ID \
            ON DUPLICATE KEY UPDATE ArtistList = VALUES(ArtistList)
    sql_query = SELECT ID, UserID, TimeAdded, LastVote, CategoryID, Title, \
                Year, ArtistList, ReleaseType, CodecList, SourceList, ContainerList, ResolutionList, FillerID, \
                TorrentID, TimeFilled, Visible, Votes, Bounty, \
                Year AS YearFullText \
            FROM sphinx_requests
    sql_joined_field = taglist from query; \
        SELECT rt.RequestID, REPLACE(t.Name, '.', '_') \
        FROM requests_tags AS rt \
            JOIN tags AS t ON TagID = ID \
        ORDER BY requestid ASC;
    sql_attr_multi = uint Voter from query; \
        SELECT RequestID AS ID, UserID FROM requests_votes
    sql_attr_multi = uint Bookmarker from query; \
        SELECT RequestID AS ID, UserID FROM bookmarks_requests
    sql_query_post_index = DELETE FROM sphinx_requests_delta WHERE TimeAdded <= \
        (SELECT ID FROM sphinx_index_last_pos WHERE type = 'requests')
}
source requests_delta : requests_base {
    sql_query = SELECT ID, UserID, TimeAdded, LastVote, CategoryID, Title, TagList, \
                Year, ArtistList, ReleaseType, CodecList, SourceList, ContainerList, ResolutionList, FillerID, \
                TorrentID, TimeFilled, Visible, Votes, Bounty, \
                Year AS YearFullText \
            FROM sphinx_requests_delta
    sql_query_killlist = SELECT ID FROM sphinx_requests_delta
    sql_attr_multi = uint Voter from query; \
        SELECT v.RequestID, v.UserID FROM requests_votes AS v \
        JOIN sphinx_requests_delta AS d ON d.ID = v.RequestID
    sql_attr_multi = uint Bookmarker from query; \
        SELECT b.RequestID, b.UserID FROM bookmarks_requests AS b \
        JOIN sphinx_requests_delta AS d ON d.ID = b.RequestID
}
index requests : torrents {
    source = requests
    path = /var/lib/manticore/data/requests
}
index requests_delta : requests {
    source = requests_delta
    path = /var/lib/manticore/data/requests_delta
}
source log : connect {
    sql_attr_uint = Time
    sql_query = SELECT ID, UNIX_TIMESTAMP(Time) AS Time, Message FROM log
    sql_query_post_index = REPLACE INTO sphinx_index_last_pos VALUES ('log', $maxid)
}
source log_delta : log {
    sql_query_pre = SELECT ID FROM sphinx_index_last_pos WHERE type = 'log' INTO @lastid
    sql_query = SELECT ID, UNIX_TIMESTAMP(Time) AS Time, Message FROM log WHERE ID > @lastid
    sql_query_post_index = SET @nothing = 0
}
index log : torrents {
    source = log
    path = /var/lib/manticore/data/log
    min_word_len = 1
}
index log_delta : log {
    source = log_delta
    path = /var/lib/manticore/data/log_delta
}

indexer {
    mem_limit = 128M
}

searchd {
    listen = 9312
    listen = 9306:mysql41
    query_log = /var/log/query.log
    pid_file = /var/run/searchd.pid
}
